# -*- coding: utf-8 -*-
from __future__ import division, print_function, absolute_import
import os

"""
100 images:
R: 0.691729323308
P: 0.85119299535
mAP: 0.598408455261
F: 0.763220737114

1000 images:
R: 0.785653650255
P: 0.849446023938
mAP: 0.669992815963
F: 0.816305427656

4000 images:
R: 0.790946413137
P: 0.849960659568
mAP: 0.675237247688
F: 0.819392330225
"""

# root path
ROO_PATH = os.path.abspath('/mnt/ExtraDisk/yangxue/FPN_v2')

# pretrain weights path
VGG16_WEIGHT_PATH = ROO_PATH + '/data/pretrained_weights/vgg16.npy'
MODEL_PATH = ROO_PATH + '/output/model'
SUMMARY_PATH = ROO_PATH + '/output/summary'

TEST_SAVE_PATH = ROO_PATH + '/tools/test_result'
INFERENCE_IMAGE_PATH = ROO_PATH + '/tools/inference_image'
INFERENCE_SAVE_PATH = ROO_PATH + '/tools/inference_result'

NET_NAME = 'resnet_101'
VERSION = 'v2'
CLASS_NUM = 1
BASE_ANCHOR_SIZE_LIST = [32, 64, 128, 256, 512]
ANCHOR_SCALES = [1.]
ANCHOR_RATIOS = [1 / 3., 1., 3.0]
SCALE_FACTORS = [10., 10., 5., 5., 5.]
OUTPUT_STRIDE = 16
SHORT_SIDE_LEN = 600

BATCH_SIZE = 1
WEIGHT_DECAY = {'vggnet16': 0.0005, 'resnet_50': 0.0001, 'resnet_101': 0.0001}
EPSILON = 1e-5
MOMENTUM = 0.9
MAX_ITERATION = 30000
GPU_GROUP = "15"

# rpn
RPN_NMS_IOU_THRESHOLD = 0.7
MAX_PROPOSAL_NUM = 300
RPN_IOU_POSITIVE_THRESHOLD = 0.7
RPN_IOU_NEGATIVE_THRESHOLD = 0.3
RPN_MINIBATCH_SIZE = 256
RPN_POSITIVE_RATE = 0.5
IS_FILTER_OUTSIDE_BOXES = True

# fast rcnn
ROI_SIZE = 14
ROI_POOL_KERNEL_SIZE = 2
USE_DROPOUT = False
KEEP_PROB = 0.5
FAST_RCNN_NMS_IOU_THRESHOLD = 0.6
FAST_RCNN_NMS_MAX_BOXES_PER_CLASS = 20
FINAL_SCORE_THRESHOLD = 0.65
FAST_RCNN_IOU_POSITIVE_THRESHOLD = 0.5
FAST_RCNN_MINIBATCH_SIZE = 128
FAST_RCNN_POSITIVE_RATE = 0.25

